1,Today I use Bootstrap file-input to build my program.But when I click the 'upload' button it doesn't upload the file to the server.
	Trace: 
	Reason:"$(document).on('ready',function(){})"
	Solve:Replace "$(document).on('ready',function(){})" to "$(window).load(function(){})";
	References:https://segmentfault.com/a/1190000004976402


基本类型 
引用类型

整理 fileinput 各个属性
$ele.fileinput('destroy').fileinput({
	language:'zh',
	allowedFileExtensions : ['html','py'],
	allowedPreviewTypes:null,	// Allow every types of file.At least it doesn't occur error.
	showPreview:true,
	dropZoneEnabled:false,
	maxFileCount: 2,
	hideThumbnailContent:true,
	showClose:false,			// 去掉关闭按钮
	showRemove:true,			// 移除
	removeLabel:'移除',			// 移除按钮显示汉字
	showCancel:false,
	// showUpload:false,
	uploadUrl:'/upload',
	uploadAsync:false,			// default is true(async异步)
	layoutTemplates:{
		actionZoom:'',			// 预览区域的
		actionDelete:'',		// 预览区域的删除按钮
		actionUpload:''			// 预览区域的上传按钮
	},
	uploadExtraData:function(previewId,index){
		var chn_id = $('#saveInChnBtn').val();
		if (MyHelper.isNullString(chn_id)){
			return {type:1}
		} else {
			return {type:2}
		}
	},
	mergeAjaxCallbacks:'before',	// when set to 'before', the ajax callbacks set in ajaxSettings will be merged before the default plugin callback.
	ajaxSettings:{
		beforeSend:function(xhr, settings) {
			if (csrf_token != null) {
				if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
					xhr.setRequestHeader("X-CSRFToken", csrf_token)
				}
			}
		}
	}
}).on('filebatchselected', function(event, files) {	// 选中状态的时候
	$ele.parent().siblings('a').show();
}).on('filebatchuploadsuccess',function(event,data){	// uploadAsync为true时触发批量上传 OR 上传成功回调
	let gotFrames = $ele.fileinput('getFrames');
	
	let selected_count = gotFrames.length;
	if(selected_count !== 2 && type === 0){
		swal({ title:"上传失败", text:'须同时上传两份文件', type:"error"})
		return;
	}

	if(gotFrames[0].title.split('.')[1] === gotFrames[1].title.split('.')[1]){
		swal({ title:"上传失败", text:'应上传不同文件类型', type:"error"});
		return;
	}

	$ele.parent().siblings('a').hide();
	if (data.response.result){ // success
		local_name = data.response.data.local_name;
		script_name = data.response.data.script_name;
		swal({ title:"上传成功", text:data.response.msg, type:"success"});

		// console.log(JSON.stringify({local_name:local_name,script_name:script_name}))
		if ($ele.is($('#upload_file_input'))) {
			local_name = local_name;
			script_name = script_name;
		}else if ($ele.is($('#upload_file_check'))) {
			local_showdata_name = local_name;
			script_showdata_name = script_name;
		}
	}else{
		swal({ title:"错误", text:data.response.msg, type:"error"});
	}
}).on('fileclear',function(ev,id){		//This event is triggered when the file input remove button or preview window close icon is pressed for clearing the file preview.
	$ele.fileinput('reset');
	$ele.parent().siblings('a').hide();
	if ($ele.is($('#upload_file_input'))) {
		local_name = '';
		script_name = '';
	}else if ($ele.is($('#upload_file_check'))) {
		local_showdata_name = '';
		script_showdata_name = '';
	}
});

https://wenku.baidu.com/view/9db18ac70c22590102029db0.html
windows.onload 与 $document.ready区别


说明如果 带着class = file并且没有js初始化就会按照 class的来，要是没有 调用一次就有了





1，	订单跟踪表格超出外面gridster框
	状态：解决
	时间：2018-07-10
	描述：在管理大看板中，订单跟踪下，表格超出了外侧的布局框，突出一部分。但是在页面宽度小于某值的时候，这个bug不会出现，一切都正常。
	跟踪：因为宽度高度不定，所以表格tbody部分的高度是(外侧grid框高度-table head的高度)得来的。并且我是写的一套代码，页面上还有一个用到这样计算的表格，但是那个高度始终是正常状态。
				结果把table head高度打印出来，发现打印出的高度与实际的高度不符合，比实际高度要小。应该是table head在渲染计算之后拿到的高度，之后渲染的时候实际高度超过了计算出的高度。
				因为table head中有几项因为文字多，发生折行现象，导致实际高度比计算的高度要大。所以<br />一下table head中的折行文字，在渲染之前计算得到的高度与实际高度一致。
	解决：在table head 折行文字中加上<br />，问题解决。


2，	有些post接口能正常返回，有些接口返回400Bad Request
	状态：解决
	时间：2018-07-10
	描述：在管理大看板中，有多个接口。有些接口是可以正常返回数据的，有些接口会报错（400Bad Request (csrf_token is missing)）
	跟踪：在浏览器中点击开控制台，点击network ，点击请求的接口，查看请求头和返回的样式。发现请求头中没有CSRF_token项，而正常的请求应该是有的。用的是ajax请求的。在ajax beforeSend项下是定义请求头内容
				的。结果判断的是（method === 'post'）的时候发送csrf，而在代码中引用的时候我改成了"POST".结果报错。
	解决：把"POST"改为"post"，问题解决。
	
3，	生产物联管理看板-->"订单跟踪" 点击下面列表后 反应时间过长
	状态：解决
	时间2018/07/12
	描述：在生产物联看板中，“订单跟踪”模块里 点击列表每一项，刚刷新的时候刷新正常，过一段时间后反应时间就长了
	跟踪：找到写click事件的代码，是用的事件委托的方式，委托给了外侧的div。一开始以为是localStorage.setItem（写入本地localstorage）耗费了时间，代码顺序调整了还是不行，把执行几行语句的时间都打印了出来。都是一致的。所以不是代码顺序的问题。但是发现每刷新一次（从后端取数据刷新到页面）之后，打印信息都会多一倍。。。这是个重要信息，说明代码块刷新几次就会累计执行几次。之后我在代码中把外侧div的DOM对象打印出来了，想看看是不是标签由于多次刷新导致多次累积。发现并不是，继续看DOM打印信息，当时想如果有累加，肯定它的某个属性值会越来越多，会累积。逐项看去，在jQuery22306480995194495761.event.click项下面发现项数越来越多，瞬间知道原因了。因为我只是DOM清空了，但是监听事件还是在div(DOM)上，故。
	解决：事件委托由原来的div 改为 每次都更新的 div子元素table，就可以了。


4，	想要拿到 ajax返回的HTML，需要把dataType为html

5，引用类型 和 基本类型的比较


